
During a cycle, all cubes simultaneously change their state according to the following rules:
    If a cube is active and exactly 2 or 3 of its neighbors are also active,
        the cube remains active. Otherwise, the cube becomes inactive.
    If a cube is inactive but exactly 3 of its neighbors are active,
        the cube becomes active. Otherwise, the cube remains inactive.

Strategy: load the original map as Matrix2D of char.

Option 1: load into a 3D matrix. Then each iteration is O(N), since we just
have to each field against its neighbors. Growing is a pain this way though.
I could write a fancy growable matrix but that has its own problems.

Option 2: Keep each "life form" as a Point3D in a list. For each life-form,
iterate through every other life-form and figure out how many are neighbors.
Easily infinitely growable, but O(N^2) for each iteration. Since there are
only six in part one maybe that's okay. Obvious optimizations:
  1. Can't exit early if we find three neighbors due to "exactly" clause.
  2. If we kept points sorted on one dimension, then we would know that
     as soon as that dimension is two away then they aren't neighbors.
     Worst cast is still O(N^2) if all points are at the same point on
     that axis, but likely to be faster.

Option 3: Use a hashset of life forms. For each life form, just ask the
list if each of its neighbors are there--O(N). For generating the iteration,
hashmap points to number of neighbors, every time we ask about neighbors
increase value by 1, then reduce based on state rules. Similar memory
usage to Option 2 due to need for iteration arrays. Obvious choice.